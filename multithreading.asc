Le multi threading
==================


La synhronisation
-----------------

Chaque thread a son fil d'exécution.
Il faut mettre en place des mécanismes de synchronisation entre Thread parents et enfants.


Il existe 2 types de gestion de synchronisations : 

Un thread parent attend qu'un thread fils fini.

Utilisation de join() : On attend que le thread se termine, le code est bloqué jusqu'à ce que le thread arrive.
Note : /!\ attention, il faut avoir la min sur le thread pour attendre, chaque sous niveau de thread enfant crééé doit être proprement maitrisé

[plantuml]
-----
User -> Parent : launch()
activate Parent 
Parent -> Child : start()
activate Child
Child -> Child : doMyWork()

Parent -> Child : join()
deactivate Child
Parent -> Parent : doSomethingAfterChildFinish()
deactivate Parent 
-----


Exemples :  
Design Pattern worker 
 les threads enfants sont des workers pour une tache globale, la tache globale doit attendre la fin de tous les enfants 


Un thread parent gère  un évènement d'un fils :

Utiliser le mecanisme wait()/notify():

wait() : doit être utilisé dans un verrour, il bloque et libère le verrou du thread et attend un notify() pour reprendre.

Exemple:
Design Pattern Monitor
Un thread parent doit effectuer une action suite à un état du fils.

[plantuml]
-----
User -> Parent : launch()
activate Parent 
Parent -> Child : start()
activate Child
Child -> Child : setState()
Child -\ Child :  wait()

Parent -> Child : getProperty()
Parent -> Parent : doSomething()
Parent -> Child : notify()
Child -> Child :  instructionAfterWait()
deactivate Child
deactivate Parent
-----



"http://plantuml.sourceforge.net/sequence.html"

